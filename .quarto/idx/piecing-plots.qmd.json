{"title":"Piecing Plots Together","markdown":{"yaml":{"title":"Piecing Plots Together","author":"Emorie D Beck","format":{"html":{"code-tools":true,"code-copy":true,"code-line-numbers":true,"code-link":true,"theme":"united","highlight-style":"tango","df-print":"paged","code-fold":"show","toc":true,"toc-float":true,"self-contained":true,"footer":"PSC 290 - Data Visualization","logo":"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"}},"editor_options":{"chunk_output_type":"console"}},"headingText":"Piecing Plots Together","containsRefs":false,"markdown":"\n\n```{r, echo = F}\nknitr::opts_chunk$set(echo = TRUE, warning = F, message = F, error = F, out.width = \"90%\", fig.align=\"center\")\noptions(knitr.kable.NA = '')\n```\n\n\n## Packages  \n\n```{r, echo = T}\n# | code-line-numbers: \"11-13\"\nlibrary(RColorBrewer)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(plyr)\nlibrary(broom)\nlibrary(modelr)\nlibrary(lme4)\nlibrary(broom.mixed)\nlibrary(tidyverse)\nlibrary(ggdist)\nlibrary(patchwork)\nlibrary(cowplot)\nlibrary(ggExtra)\nlibrary(distributional)\nlibrary(gganimate)\n```\n\n## Custom Theme: \n```{r}\nmy_theme <- function(){\n  theme_classic() + \n  theme(\n    legend.position = \"bottom\"\n    , legend.title = element_text(face = \"bold\", size = rel(1))\n    , legend.text = element_text(face = \"italic\", size = rel(1))\n    , axis.text = element_text(face = \"bold\", size = rel(1.1), color = \"black\")\n    , axis.title = element_text(face = \"bold\", size = rel(1.2))\n    , plot.title = element_text(face = \"bold\", size = rel(1.2), hjust = .5)\n    , plot.subtitle = element_text(face = \"italic\", size = rel(1.2), hjust = .5)\n    , strip.text = element_text(face = \"bold\", size = rel(1.1), color = \"white\")\n    , strip.background = element_rect(fill = \"black\")\n    )\n}\n```\n\n\n## Review  {.smaller}\n\n<!-- 1 column start -->\n\n* Over the last several weeks, we have talked about: \n  + tidying data \n  + `ggplot2` logic\n  + visualizing proportions\n  + visualizing differences\n  + visualizing time series\n  + visualizing uncertainty\n  \n<!-- 2 column start -->\n\n* For the rest of the course, we will pivot to taking everything we've learning and piecing it all together\n  + **Today**: Piecing visualizations together\n  + **Next week**: Polishing visualizations \\*\\* \n  + **11/21:** Interactive Visualizations (`shiny`)\n  \n<!-- column end -->\n\n## Today  \n\n* There are lots of packages for piecing visualizations together\n* I have used lots and the only one that I can say I've actually liked in `cowplot`, so I'm going to teach you that\n* There are other more specialized packages worth mentioning  \n* Here is a short list of some core `ggplot2` extensions: [https://exts.ggplot2.tidyverse.org/gallery/](https://exts.ggplot2.tidyverse.org/gallery/)\n* We'll cover: \n  + `ggExtra`\n  + `cowplot` (and lots of assortments)\n  + [`patchwork`](https://patchwork.data-imaginist.com/index.html)\n\n## `ggExtra`\n\n* We'll start with `ggExtra` because it will help us create plots with distributions in the margins. \n* After, we'll move to cowplot, where there will be lots of little odds and ends to step through\n* Remember these data?  \n\n```{r}\nload(url(\"https://github.com/emoriebeck/psc290-data-viz-2022/blob/main/04-week4-associations/04-data/week4-data.RData?raw=true\"))\npred_data\n```\n\nLet's plot the association between conscientiousness and self-rated health across genders in Study 1: \n\n```{r}\np <- pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(x = p_value, y = SRhealth, color = gender, fill = gender)) + \n    geom_point(\n      , color = \"grey20\"\n      , shape = 21, size = 3\n      ) + \n    scale_fill_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    labs(\n      x = \"Conscientiousness (POMP, 0-10)\"\n      , y = \"Self-Rated Health (POMP, 0-10)\"\n      , fill = \"Gender\"\n    ) + \n    my_theme()\np\n```\n\nAnd add in a smoothed association and custom colors and labels  \n\n```{r}\np <- p + \n  geom_smooth(\n    , method = \"lm\"\n    ) + \n  scale_color_manual(\n    values = c(\"cornflowerblue\", \"coral\")\n    , labels = c(\"Male\", \"Female\")\n    ) + \n  labs(color = \"Gender\")\np\n```\n\nTo get marginal distributions, we can just use `ggExtra::ggMarginal()`\n\n```{r}\nggMarginal(p)\n```\n\nThis is fine, but we can do better!  \n\nLet's try `color`\n\n```{r}\nggMarginal(p, color = \"seagreen\")\n```\n\nLet's try `fill`\n\n```{r}\nggMarginal(\n  p\n  , color = \"seagreen\"\n  , fill = \"seagreen\"\n  , alpha = .5\n  )\n```\n\nLet's try a histogram\n\n```{r}\nggMarginal(\n  p\n  , color = \"seagreen\"\n  , fill = \"seagreen\"\n  , alpha = .5\n  , type = \"histogram\"\n  )\n```\n\nAnd group-based fill and color\n\n```{r}\nggMarginal(\n  p\n  , groupColour = T\n  , groupFill = T\n  )\n```\n\nThis is not expected behavior, so let's move on to `patchwork` and `cowplot` where we can make these much more flexibly with just a few extra lines of code  \n\n# `cowplot` + `pathwork`\n\n* Why `cowplot` or `patchwork`? \n  + figure alignment\n  + easier to choose relative values and layouts\n  + can mix base `R` plots and `ggplot2` plots\n  + allows you to annotate plots (including stacking, as opposed to layering)\n  + shared legends!\n  + includes the themes from his book  \n  \n## Piecing the Plots Together\n\nFirst, let's build the `x` and `y` marignals  \n\n```{r}\npx <- pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(x = p_value, fill = gender, color = gender)) + \n    geom_density(alpha = .5) + \n    scale_color_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    scale_fill_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    labs(fill = \"Gender\", color = \"Gender\") + \n    theme_void()\npx\n```\n\n```{r}\npy <- pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(x = SRhealth, fill = gender, color = gender)) + \n    geom_density(alpha = .5) + \n    scale_color_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    scale_fill_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    labs(fill = \"Gender\", color = \"Gender\") + \n    coord_flip() + \n    theme_void()\npy\n```\n\nWith `patchwork`, we can use the `+` and `/` operators to arrange them: \n\n```{r}\npx / (p + py)\n```\n\nThat arrangement isn't quite right, so let's use `plot_layout()` to create a custom layout:  \n\n```{r}\nlayout <- \"\nAAAAAA##\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\n\"\n\npx + p + py +\n  plot_layout(design = layout)\n```\n\nThose legends are messing us up! Let's use `guides = \"collect\"` within `plot_layout()`. Then we'll use the `&` to add a theme to the whole plot:  \n\n```{r}\nlayout <- \"\nAAAAAA##\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\n\"\n\npx + p + py +\n  plot_layout(\n    design = layout\n    , guides = \"collect\"\n    ) & \n  theme(legend.position = \"bottom\")\n```\n\nHonestly, we don't need the marginal legend\n\nSo let's remove it: \n\n```{r}\nlayout <- \"\nAAAAAA##\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\n\"\n\n(px + theme(legend.position = \"none\")) + \n  p + \n  (py + theme(legend.position = \"none\")) +\n  plot_layout(\n    design = layout\n    ) \n```\n\nLet's do the same thing but with `geom_boxplot()` and `geom_jitter()`  \n\n```{r}\npx <- pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(x = p_value, y = gender, fill = gender, color = gender)) + \n    geom_boxplot(alpha = .5) + \n    geom_jitter(aes(y = gender), alpha = .5) + \n    scale_color_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    scale_fill_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    labs(fill = \"Gender\", color = \"Gender\") + \n    theme_void() + \n    theme(legend.position = \"none\")\npx\n```\n\n```{r}\npy <- pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(x = SRhealth, y = gender, fill = gender, color = gender)) + \n    geom_boxplot(alpha = .5) + \n    geom_jitter(aes(y = gender), alpha = .5) + \n    scale_color_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    scale_fill_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    labs(fill = \"Gender\", color = \"Gender\") + \n    coord_flip() + \n    theme_void() + \n    theme(legend.position = \"none\")\npy\n```\n\nAnd let's put it back together  \n\n```{r}\nlayout <- \"\nAAAAAA##\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\n\"\n\n(px + theme(legend.position = \"none\")) + \n  p + \n  (py + theme(legend.position = \"none\")) +\n  plot_layout(\n    design = layout\n    ) \n```\n\n# Advanced Piecing Plots Together \n\n* Marginal plots are great for lots of reasons\n* But when it comes to piecing plots together, we are often interested for bringing together different kinds of figures together because you can't bring them together with facets or other ways\n\n## `cowplot` {.smaller}\n\nLet me show you a couple of examples from my work that has used `cowplot`  \n\nFrom [Beck & Jackson (2020)](https://psyarxiv.com/7pg9b/):  \n\n```{r, echo = F, out.width=\"100%\"}\ninclude_graphics(\"https://github.com/emoriebeck/selection/raw/master/results/sca/plots/png/perm_mortality_N.png\")\n```\n\nFrom Beck et al. (under review):  \n\n```{r, echo = F, out.width=\"60%\"}\ninclude_graphics(\"https://github.com/emoriebeck/personality-dementia-neuropath/raw/master/results/figures/study-specific-combined-panels/dementia-shared.png\")\n```\n\n\nFrom [Beck & Jackson (2022)](https://psyarxiv.com/syhw5):\n\n```{r, echo = F}\ninclude_graphics(\"https://github.com/emoriebeck/behavior-prediction/raw/main/05-results/05-figures/fig-4-combined_top5.png\")\n```\n\n## Example: Forest Plots  \n\n* Let's build up our use cases incrementally! \n* But first, we need some plots to plot!  \n\n### Models\n\nAnd remember these models?  \n\n```{r}\ntidy_ci <- function(m) tidy(m, conf.int = T)\n\nnested_m <- pred_data %>%\n  group_by(study) %>%\n  nest() %>%\n  ungroup() %>%\n  mutate(\n    m = map(data\n            , ~glm(\n              o_value ~ p_value\n              , data = .\n              , family = binomial(link = \"logit\")\n              )\n            )\n    , tidy = map(m, tidy_ci)\n  )\nnested_m\n```\n\nLet's do one small change\n\n```{r}\n#| code-line-numbers: \"|1-4|5\"\nm_fun <- function(d) {\n  glm(o_value ~ p_value + married + married:p_value\n      , data = d\n      , family = binomial(link = \"logit\"))\n}\ntidy_ci <- function(m) tidy(m, conf.int = T) %>% mutate(df.resid = m$df.residual, n = nrow(m$data))\n\nnested_m <- pred_data %>%\n  group_by(study) %>%\n  nest() %>%\n  ungroup() %>%\n  mutate(\n    m = map(data, m_fun)\n    , tidy = map(m, tidy_ci)\n  )\nnested_m\n```\n\nHere's our unnested model terms\n\n```{r}\nnested_m %>% select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp)\n```\n\nBut maybe we are particularly interested in the interaction between marital status and personality in predicting mortality, which we want to plot as a forest plot  \n\n```{r}\nnested_m %>% select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  filter(term == \"p_value:married1\")\n```\n\n* We could hack our way to a forest plot in a single figure, but it never looks as nice as if we do it in two  \n  + the forest plot itself  \n  + the table of values  \n\n### Forest Plot  \n\n```{r}\np1 <- nested_m %>% select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  filter(term == \"p_value:married1\") %>%\n  ggplot(aes(x = estimate, y = fct_rev(study))) + \n    labs(\n      x = \"Model Estimated OR (CI)\"\n      , y = NULL\n      ) + \n    my_theme()\np1\n```\n\nLet's add our point estimates and uncertainty intervals\n\n```{r}\np1 + \n  stat_gradientinterval(\n    aes(xdist = dist_student_t(df = df.resid, mu = estimate, sigma = std.error))\n    , .width = c(.95, .99)\n    , shape = \"square\"\n  ) \np1\n```\n\nBut we want to order the terms by their effect size: \n\n```{r}\np1 <- nested_m %>% select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  filter(term == \"p_value:married1\")\n\np1 <- p1 %>% \n  mutate(study = factor(study, (p1 %>% arrange(desc(estimate)))$study)) %>%\n  ggplot(aes(x = estimate, y = study)) + \n    labs(\n      x = \"Model Estimated OR (CI)\"\n      , y = NULL\n      ) + \n    my_theme()\np1\n```\n\nNow, let's re-add our point estimates and uncertainty intervals\n\n```{r}\np1 <- p1 + \n  stat_gradientinterval(\n    aes(xdist = dist_student_t(df = df.resid, mu = estimate, sigma = std.error))\n    , .width = c(.95, .99)\n    , shape = \"square\"\n  ) \np1\n```\n\nAnd add a vertical line at one (no higher or lower odds)  \n\n```{r}\np1 <- p1 + \n  geom_vline(aes(xintercept = 1), linetype = \"dashed\") \np1 \n```\n\n### Forest Plot Table \n\nIn a forest plot, we don't just show estimates, we print them with the sample size  \n\n```{r}\np2 <- nested_m %>% select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  filter(term == \"p_value:married1\")\n\nstdy_levs <-  tibble(num = 1:6, new = (p2 %>% arrange(desc(estimate)))$study)\n\np2 <- p2 %>%\n  arrange(desc(estimate)) %>%\n  mutate(study = factor(study, stdy_levs$new)\n         , study2 = 1:n()) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), ~sprintf(\"%.2f\", .)) %>%\n  mutate(est = sprintf(\"%s [%s, %s]\", estimate, conf.low, conf.high)\n         , n = as.character(n)) %>%\n  select(study, study2, estimate, n, est) %>%\n  pivot_longer(\n    cols = c(est, n)\n    , values_to = \"lab\"\n    , names_to = \"est\"\n  )\np2\n```\n\nAdd labels and themes: \n\n```{r}\np2 <- p2 %>%\n  ggplot(aes(x = est, y = study2)) + \n    labs(\n      x = NULL\n      , y = NULL\n      ) + \n    my_theme()\np2\n```\n\nAdd the label text: \n\n```{r}\np2 <- p2 + \n  geom_text(aes(label = lab))\np2\n```\n\nChange to `theme_void()`\n\n```{r}\np2 <- p2 + \n  theme_void()\np2\n```\n\nAdd a top line and re-add the bottom axis line: \n\n```{r}\np2 <- p2 + \n  geom_hline(aes(yintercept = 6.5)) + \n  theme(axis.line.x = element_line(color = \"black\"))\np2\n```\n\nAnd `annotate()` the column levels back in  \n\n```{r}\n# \"My~bold(Partly~Bold)~and~italic(Partly~Italic)~Text\"\np2 <- p2 + \n  annotate(\"text\"\n           , x = \"est\" , y = 7\n           , label = \"b [CI]\"\n           , fontface = \"bold\"\n           ) + \n  annotate(\"text\"\n           , x = \"n\", y = 7\n           , label = \"N\"\n           , fontface = \"bold\"\n           ) \np2\n```\n\nChange the scale limits to improve the figure  \n\n```{r}\np2 <- p2 + \n  scale_y_continuous(limits = c(.4,7.1))\np2\n```\n\n### Back to the Forest Plot  \n\nWe added an extra row at the top of the table, so we need to do that for the forest plot, too\n\n```{r}\np1 <- nested_m %>% select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  filter(term == \"p_value:married1\")\n\nstdy_levs <-  tibble(num = 1:6, new = (p1 %>% arrange(desc(estimate)))$study)\n\np1 <- p1 %>%\n  arrange(desc(estimate)) %>%\n  mutate(study = factor(study, stdy_levs$new)\n         , study2 = 1:n()) %>%\n  ggplot(aes(x = estimate, y = study2)) + \n    labs(\n      x = \"Model Estimated OR (CI)\"\n      , y = NULL\n      ) + \n    my_theme()\np1\n```\n\nAdd our point estimates and uncertainty intervals, along with the vertical line at OR = 1\n\n```{r}\np1 <- p1 + \n  stat_gradientinterval(\n    aes(xdist = dist_student_t(df = df.resid, mu = estimate, sigma = std.error))\n    , .width = c(.95, .99)\n    , shape = \"square\"\n  ) + \n  geom_vline(aes(xintercept = 1), linetype = \"dashed\") \np1\n```\n\nChange the y scale back to match the study labels \n\n```{r}\np1 <- p1 + \n  scale_y_continuous(limits = c(.4,7.1)\n                     , breaks = seq(1,6,1)\n                     , labels = stdy_levs$new)\np1 \n```\n\nAdd in that top bar to match the table\n\n```{r}\np1 <- p1 + \n  geom_hline(aes(yintercept = 6.5))\np1 \n```\n\nRemove the y axis line\n\n```{r}\np1 <- p1 + \n  theme(axis.line.y = element_blank(), \n        axis.ticks.y = element_blank())\np1 \n```\n\nAnd let's block out where the dashed line touches the top:  \n\n```{r}\np1 <- p1 + \n  annotate(\"rect\"\n           , xmin = -Inf\n           , xmax = Inf\n           , ymin = 6.51\n           , ymax = Inf\n           , fill = \"white\")\np1\n```\n\n# `patchwork`\n\n## Piecing the Plots Together  \n\n* I know that was a lot, but such is the reality of ggplot -- we have to hack it!\n  + `annotate()` is a great tool for this\n  + so are our `scale_[map]_[type]` functions, especially given the labels can be anything we want!\n  + and our `theme` elements also let us hack many more parts! \n* The biggest trick to `ggplot2` is simply having lots of tricks up your sleeve, which come from knowledge (and StackOverflow)\n* `patchwork` is great, and a little more intuitive for simple use cases\n* (We'll still talk some about cowplot and a more full demo of it is at the end of the slides and in the workbook)\n* `patchwork` allows you to use the `+` to piece plots together and makes a lot of default assumptions about alignment\n* It also let's you continue to layer on top of figures that are pieced together, which `cowplot` doesn't do (easily)\n\nWe can just use the `+` operator!  \n\n```{r}\np1 + p2\n```\n\nWe can also add rows using the `/`\n\n```{r}\np1 / p2\n```\n\nAnd change their arrangement using `plot_layout()`  \n\n```{r}\np1 / p2 + plot_layout(heights = c(3,7))\n```\n\nAnd change their arrangement using `plot_layout()`  \n\n```{r}\np1 + p2 + plot_layout(widths = c(6,4))\n```\n\nWe can add titles using `plot_annotation()`\n\n<!-- ```{r} -->\n<!-- title / (p1 + p2) + plot_layout(heights = c(1,10)) -->\n<!-- ``` -->\n\n```{r}\np1 + p2 + \n  plot_layout(widths = c(6,4)) + \n  plot_annotation(\n    title = \"Mortality Odds\"\n    , subtitle = \"Conscientiousness x Marital Status\"\n    , theme = my_theme()\n    ) \n```\n\nWe can add labels to plot using `plot_annotation()`\n\n```{r}\np1 + p2 + \n  plot_layout(widths = c(6,4)) + \n  plot_annotation(\n    title = \"Mortality Odds\"\n    , subtitle = \"Conscientiousness x Marital Status\"\n    , theme = my_theme()\n    , tag_levels = 'A'\n    ) \n```\n\nAnd control additional elements with `tag_prefix` and `tag_suffix()`  \n\n```{r}\np1 + p2 + \n  plot_layout(widths = c(6,4)) + \n  plot_annotation(\n    title = \"Mortality Odds\"\n    , subtitle = \"Conscientiousness x Marital Status\"\n    , theme = my_theme()\n    , tag_levels = 'A'\n    , tag_prefix = 'Fig. '\n    , tag_suffix = ':'\n    ) & \n  theme(plot.tag = element_text(size = 8, face = \"bold\"))\n```\n\n## Example Setup: Simple Effects  \n\nBut maybe we want to add the simple effects along with the forest plots of the interaction. Let's set that up. \n\n```{r}\npred_fun <- function(m){\n  m$data %>%\n    data_grid(married, p_value = seq_range(p_value, n = 100)) %>%\n    drop_na() %>%\n    augment(m\n            , newdata = .\n            , se_fit = T\n            , type.predict = \"response\"\n            )\n}\n\nnested_m <- nested_m %>%\n  mutate(pred = map(m, pred_fun)) \nnested_m\n```\n\nWe also want to bring the residual degrees of freedom in so that we can use them later in `stat_lineribbon()`:  \n\n```{r}\nnested_m %>% \n  mutate(df.resid = map_dbl(m, df.residual)) %>%\n  select(study, pred, df.resid) %>%\n  unnest(pred) \n```\n\nLet's save that and set up the basic core of the plot  \n\n```{r}\np3 <- nested_m %>% \n  mutate(df.resid = map_dbl(m, df.residual)) %>%\n  select(study, pred, df.resid) %>%\n  unnest(pred) %>%\n  mutate(married = factor(married, c(0,1), c(\"Never Married\", \"Married\"))) %>%\n  ggplot(aes(x = p_value, y = .fitted, fill = study, color = study)) + \n  labs(x = \"Conscientiousness (POMP, 0-10)\"\n       , y = \"Predicted Odds Ratio\\nof Mortality (95% CI)\"\n       , fill = NULL\n       , color = NULL) + \n  facet_grid(~married) + \n  my_theme()  \n```\n\nNow let's use `stat_lineribbon()` and add in the color palettes for `fill` and `color`\n\n```{r}\np3 <- p3 + \n  stat_lineribbon(\n      aes(ydist = dist_student_t(df = df.resid, mu = .fitted, sigma = .se.fit))\n      , alpha = .25\n      , .width = c(.95,.99)\n      ) + \n    scale_fill_brewer(palette = \"Set2\") +\n    scale_color_brewer(palette = \"Dark2\") \np3\n```\n\nWe can then use `+` to bring together the forest plot and table on the same row and `/` to put the simple effects plot on the next row.  \n\n```{r, fig.dim=c(10,7)}\n(p1 + p2) / p3\n```\n\nAnd use plot annotation to add in the `title` and `subtitle`\n\n```{r, fig.dim=c(10,7)}\n(p1 + p2) / p3 + \n  plot_layout(widths = c(6,4)) + \n  plot_annotation(\n    title = \"Mortality Odds\"\n    , subtitle = \"Conscientiousness x Marital Status\"\n    , theme = my_theme()\n    ) \n```\n\nLet's collect the legend to the bottom of the plot\n\n```{r, fig.dim=c(10,7)}\n(p1 + p2) / p3 + \n  plot_layout(widths = c(6,4)) + \n  plot_annotation(\n    title = \"Mortality Odds\"\n    , subtitle = \"Conscientiousness x Marital Status\"\n    , theme = my_theme()\n    ) + \n  plot_layout(guides = 'collect')\n```\n\n# cowplot  \n\n`cowplot` provides lots of tools for sprucing up these plots.  \n\n## New grobs for drawing on our plots\n\n* Relative to `patchwork`, `cowplot` also adds some other new tools to our repertoire: \n  + `ggdraw()`\n  + `draw_label()`\n  + `draw_plot_label()`\n  + `draw_grob()`\n  + `draw_image()`\n  \n### `ggdraw()` + `draw_label()`\n`* `ggdraw()` is more or a setup function that allows us to add grobs on top\n* We'll use it with `draw_label()` to make our title (just some text to put on the plot)\n\nIt'd be nice if the title was centered, right?  \n\n```{r}\n(p1 +\n  labs(\n    subtitle = \"Conscientiousness x Marital Status\"\n    , title = \"Mortality Odds\"\n    )) + \n  p2 + \n  plot_layout(widths = c(6,4))\n```\n\nWe could use `draw_label()` to add a title and subtitle to our plot:\n\n```{r}\ntitle <- ggdraw() + \n  draw_label(\n    \"Mortality Odds\"\n    , fontface = 'bold'\n    , x = .5\n    , hjust = .5\n    , y = .8\n  ) +\n  draw_label(\n    \"Conscientiousness x Marital Status\"\n    , fontface = 'italic'\n    , x = .5\n    , hjust = .5\n    , y = .2\n  ) +\n  theme(\n    # add margin on the left of the drawing canvas,\n    # so title is aligned with left edge of first plot\n    plot.margin = margin(0, 0, 0, 7)\n  )\ntitle\n```\n\nNow we can add that title in using `patchwork` (see below fo the `cowplot` version)\n\n```{r}\np <- title / (p1 + p2) + \n  plot_layout(\n    widths = c(6,4)\n    , heights = c(1,9)\n    )\np\n```\n\n* `draw_label()` is meant to be a better wrapper for `geom_text()` that requires less customization  \n* Say for example, we want to put a wordmark on our plots (there are journals that require this!)\n* Doing this with `geom_text()` would require 10+ arguments and has no easy application to figures put together with cowplot (or other packages for doing so) \n \n```{r}\nggdraw(p) + \n  draw_label(\"Draft\", color = \"grey80\", size = 100, angle = 45)\n```\n\n* Imagine you want to put a plot inside of another\n* First let's set up the examples\n\n```{r}\ninset <- \n  pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(y = gender, x = SRhealth, fill = gender)) + \n    scale_fill_manual(values = c(\"cornflowerblue\", \"coral\")) + \n    scale_y_discrete(labels = c(\"Male\", \"Female\")) + \n    stat_halfeye(alpha = .8) + \n    my_theme() + \n    theme(legend.position = \"none\") + theme_half_open(12)\n\np4 <- pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(x = p_value, SRhealth, fill = gender)) + \n    geom_point(shape = 21, color = \"grey20\", size = 3) + \n    scale_fill_manual(values = c(\"cornflowerblue\", \"coral\"), labels = c(\"Male\", \"Female\")) + \n    my_theme()\n```\n\nAnd add the inset plot on (note, this is not a great example)\n\n```{r}\nggdraw(p4) + \n  draw_plot(inset, .1, .2, .6, .4)\n```\n\nWe can also add images!\n\n```{r}\nggdraw() + \n  draw_plot(p) + \n  draw_image(\n    \"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png\"\n    , x = 1, y = 0.05, hjust = 1, vjust = 1, halign = 1, valign = 1,\n    width = 0.15\n  )\n```\n\n# Extra Slides: `cowplot::plot_grid()`\n\n## `plot_grid()` \n\n* The core function of `cowplot` is `plot_grid()`, which allows us to place differnt figures within the same figure in a grid, and it has a lot of useful arguments\n* It's the alternative to `+`, `/` in `patchwork\n\n::::{.columns}\n:::{.column width=\"34%\"}\n\n* `plotlist = NULL`\n* `align = c(\"none\", \"h\", \"v\", \"hv\")`\n* `axis = c(\"none\", \"l\", \"r\", \"t\", \"b\", \"lr\", \"tb\", \"tblr\")`\n* `nrow = NULL`\n* `ncol = NULL`\n* `rel_widths = 1`\n* `rel_heights = 1`\n\n:::\n:::{.column width=\"33%\"}\n\n* `labels = NULL`\n* `label_size = 14`\n* `label_fontfamily = NULL`\n* `label_fontface = \"bold\"`\n* `label_colour = NULL`\n* `label_x = 0`\n* `label_y = 1`\n\n:::\n:::{.column width=\"33%\"}\n\n* `hjust = -0.5`\n* `vjust = 1.5`\n* `scale = 1`\n* `greedy = TRUE`\n* `byrow = TRUE`\n* `cols = NULL`\n* `rows = NULL`\n\n:::\n::::\n\nLet's revisit how to put together our forest plot using `cowplot` instead of `patchwork`:  \n\n```{r}\nplot_grid(\n  p1, p2\n)\n```\n\nNot bad, but we want to align our plots. We can do that with either `align` or `axis`: \n\n### `align`  \n\n::::{.columns}\n:::{.column width=\"34%\"}\n\n```{r}\nplot_grid(p1, p2, align = \"h\")\n```\n\n:::\n:::{.column width=\"33%\"}\n\n```{r}\nplot_grid(p1, p2, align = \"v\")\n```\n\n:::\n:::{.column width=\"33%\"}\n\n```{r}\nplot_grid(p1, p2, align = \"hv\")\n```\n\n:::\n::::\n\nSimilar behavior, but `\"hv\"` leads to odd spacing\n\n### `axis`\n\n::::{.columns}\n:::{.column width=\"34%\"}\n\n```{r}\nplot_grid(p1, p2, axis = \"t\")\n```\n\n:::\n:::{.column width=\"33%\"}\n\n```{r}\nplot_grid(p1, p2, axis = \"b\")\n```\n\n:::\n:::{.column width=\"33%\"}\n\n```{r}\nplot_grid(p1, p2, axis = \"tblr\")\n```\n\n:::\n::::\n\nDoesn't properly align our bottom because it's not optimized for labels. \n\nNow let's change the widths of the plots:  \n\n```{r}\nplot_grid(\n  p1, p2\n  , align = \"h\"\n  , nrow = 1\n  , rel_widths = c(.6, .4)\n  )\n```\n\nLet our interval estimates **shine**  \n\nWe wouldn't do this, but note that when we have rows, we use `rel_heights`\n\n```{r}\nplot_grid(\n  p1, p2\n  , align = \"hv\"\n  , nrow = 2\n  , rel_heights = c(.6, .4)\n  )\n```\n\n\n## `plot_grid()`: Labels  \n\nWe can do lots with labels using `cowplot::plot_grid()`\n\n::::{.columns}\n:::{.column}\n\n```{r}\nplot_grid(p1, p2, align = \"h\", nrow = 1\n          , rel_widths = c(.6, .4)\n          , labels = \"auto\")\n```\n\n:::\n:::{.column}\n\n```{r}\nplot_grid(\n  p1, p2, align = \"h\", nrow = 1\n  , rel_widths = c(.6, .4)\n  , labels = \"AUTO\")\n```\n\n:::\n::::\n\nLet's have some fun and add some chaos: `label_size`, `label_fontface`, `label_fontfamily`, and `label_colour` (note the spelling)\n\n```{r}\nplot_grid(\n  p1, p2, align = \"h\", nrow = 1\n  , rel_widths = c(.6, .4)\n  , labels = \"AUTO\"\n  , label_size = 18 # 14 default\n  , label_fontface = \"bold.italic\"\n  , label_fontfamily = \"Times\"\n  , label_colour = \"purple\" # u is sensitive\n  )\n```\n\nAnd set the location using `label_x` and `label_y`\n\n```{r}\nplot_grid(\n  p1, p2, align = \"h\", nrow = 1\n  , rel_widths = c(.6, .4)\n  , labels = \"AUTO\"\n  , label_size = 18 # 14 default\n  , label_fontface = \"bold.italic\"\n  , label_fontfamily = \"Times\"\n  , label_colour = \"purple\" # u is sensitive\n  , label_x = .5\n  , label_y = .5\n  )\n```\n\nAnd let's move them some more  \n\n```{r}\nplot_grid(\n  p1, p2, align = \"h\", nrow = 1\n  , rel_widths = c(.6, .4)\n  , labels = \"AUTO\"\n  , label_size = 18 # 14 default\n  , label_fontface = \"bold.italic\"\n  , label_fontfamily = \"Times\"\n  , label_colour = \"purple\" # u is sensitive\n  , label_x = c(.1,.85)\n  , label_y = c(.95,.1)\n  )\n```\n\n<!-- 1 column start -->\n<!-- 2 column start -->\n<!-- column end -->\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"tango","self-contained":true,"output-file":"piecing-plots.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","csl":"apa-cv.csl","bibliography":["mybib.bib"],"editor":"visual","theme":"cosmo","title":"Piecing Plots Together","author":"Emorie D Beck","editor_options":{"chunk_output_type":"console"},"code-copy":true,"toc-float":true,"footer":"PSC 290 - Data Visualization","logo":"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"},"extensions":{"book":{"multiFile":true}}}}}